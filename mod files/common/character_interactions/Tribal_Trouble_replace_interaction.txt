declare_war_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	special_interaction = declare_war_interaction
	interface = declare_war
	interface_priority = 70
	popup_on_receive = yes
	pause_on_receive = yes

	desc = declare_war_desc

	is_shown = {
		NOT = {
			scope:recipient = scope:actor
		}
		scope:recipient = {
			is_landed = yes
			NOT = {
				any_relation = {
					type = tribe_leader
					NOT = { has_realm_law = tribal_pact_protection }
				}
			}
		}
		scope:actor = {
			NOT = {
				is_at_war_with = scope:recipient
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			NOT = { has_trait = incapable }
			can_attack_in_hierarchy = scope:recipient
			NOT = {
				has_raised_armies = yes
			}
			has_any_display_cb_on = scope:recipient
			NOT = {
				is_allied_in_war = scope:recipient
			}
			custom_description = {
				text = "is_not_bankrupt"
				gold > 0
			}
			is_imprisoned = no
			trigger_if = {
				limit = {
					has_variable_list = subjugation_offer_under_consideration
				}
				custom_description = {
					text = is_not_considering_offer_of_subjugation
					NOT = {
						is_target_in_variable_list = {
							name = subjugation_offer_under_consideration
							target = scope:recipient
						}
					}
				}
			}
		}
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = {
			trigger_if = {
				limit = { is_imprisoned = yes }
				NOT = {
					imprisoner = scope:actor
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		custom_description = {
			text = "declare_war_hook_on_liege"
			OR = {
				war_declarer_needs_hook_on_liege = no
				always = scope:hook
			}
		}
		scope:actor = {
			NOR = {
				is_at_war_with = scope:recipient
				custom_description = { #A vassal cannot go to war against someone their Liege is already at war with
					text = liege_is_at_war_with_recipient
					object = scope:recipient
					liege = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
	}

	send_options_exclusive = no
	send_option = {
		is_shown = {
			war_declarer_needs_hook_on_liege = yes
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = liege
			}
		}
		flag = hook
		localization = WAR_LIEGE_HOOK
		can_invalidate_interaction = yes
	}
	should_use_extra_icon = {
		war_declarer_needs_hook_on_liege = yes
		scope:actor = { has_usable_hook = liege }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	on_accept = {

		scope:actor = {
			#Feedback!
			hidden_effect = {
				send_interface_toast = {
					title = declare_war_interaction_notification

					left_icon = scope:actor					
					right_icon = scope:recipient

					custom_tooltip = declare_war_interaction_notification_tooltip

					show_as_tooltip = {
						if = {
							limit = { always = scope:hook }
							use_hook = liege
						}
					}
				}
			}

			#Has the instigator promised a vassal a war (vassal.2601)?
			if = {
				limit = {
					exists = var:promised_war
					var:promised_war = {
						is_alive = yes
						NOT = { this = scope:recipient }
					}
				}
				trigger_event = {
					id = vassal.2610
					days = { 7 10 }
				}
			}

			if = {
				limit = { always = scope:hook }
				use_hook = liege
			}

			#Send break up event if they are your lover
			if = {
				limit = {
					has_relation_lover = scope:recipient
					NOT = { has_relation_rival = scope:recipient } #To enable really strange love stories
					any_character_war = {
						casus_belli = {
							primary_attacker = scope:actor
							primary_defender = scope:recipient
							any_target_title = { count >= 1 }
						}
					}
				}
				scope:recipient = {
					trigger_event = {
						id = lover.0103
						days = { 14 30 }
					}
				}
			}

			#Invalidate any wars your vassals have going against recipient atm
			scope:recipient = {
				if = {
					limit = {
						any_character_war = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
					}
					every_character_war = {
						limit = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
						show_as_tooltip = { end_war = invalidated } #Actually ended in the event
						primary_attacker = { trigger_event = war_event.1001 }
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

declare_war_interaction_tribal_target = {
	category = interaction_category_diplomacy
	common_interaction = yes
	special_interaction = declare_war_interaction
	interface = declare_war
	interface_priority = 70
	popup_on_receive = yes
	pause_on_receive = yes

	desc = declare_war_desc

	is_shown = {
		NOT = {
			scope:recipient = scope:actor
		}
		scope:recipient = {
			is_landed = yes
		}
		scope:actor = {
			NOT = {
				is_at_war_with = scope:recipient
			}
		}
		scope:recipient = {
				any_relation = {
					type = tribe_leader
					NOT = { has_realm_law = tribal_pact_protection }
				}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			NOT = { has_trait = incapable }
			can_attack_in_hierarchy = scope:recipient
			NOT = {
				has_raised_armies = yes
			}
			has_any_display_cb_on = scope:recipient
			NOT = {
				is_allied_in_war = scope:recipient
			}
			custom_description = {
				text = "is_not_bankrupt"
				gold > 0
			}
			is_imprisoned = no
			trigger_if = {
				limit = {
					has_variable_list = subjugation_offer_under_consideration
				}
				custom_description = {
					text = is_not_considering_offer_of_subjugation
					NOT = {
						is_target_in_variable_list = {
							name = subjugation_offer_under_consideration
							target = scope:recipient
						}
					}
				}
			}
		}
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = {
			trigger_if = {
				limit = { is_imprisoned = yes }
				NOT = {
					imprisoner = scope:actor
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		custom_description = {
			text = "declare_war_hook_on_liege"
			OR = {
				war_declarer_needs_hook_on_liege = no
				always = scope:hook
			}
		}
		scope:actor = {
			NOR = {
				is_at_war_with = scope:recipient
				custom_description = { #A vassal cannot go to war against someone their Liege is already at war with
					text = liege_is_at_war_with_recipient
					object = scope:recipient
					liege = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
	}

	redirect = {
		scope:recipient = { save_scope_as = secondary_recipient }
	}

	send_options_exclusive = no
	send_option = {
		is_shown = {
			war_declarer_needs_hook_on_liege = yes
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = liege
			}
		}
		flag = hook
		localization = WAR_LIEGE_HOOK
		can_invalidate_interaction = yes
	}
	should_use_extra_icon = {
		war_declarer_needs_hook_on_liege = yes
		scope:actor = { has_usable_hook = liege }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	on_accept = {

		scope:actor = {
			#Feedback!
			hidden_effect = {
				send_interface_toast = {
					title = declare_war_interaction_notification

					left_icon = scope:actor					
					right_icon = scope:recipient

					custom_tooltip = declare_war_interaction_notification_tooltip

					show_as_tooltip = {
						if = {
							limit = { always = scope:hook }
							use_hook = liege
						}
					}
				}
			}

			#Has the instigator promised a vassal a war (vassal.2601)?
			if = {
				limit = {
					exists = var:promised_war
					var:promised_war = {
						is_alive = yes
						NOT = { this = scope:recipient }
					}
				}
				trigger_event = {
					id = vassal.2610
					days = { 7 10 }
				}
			}

			if = {
				limit = { always = scope:hook }
				use_hook = liege
			}

			#Send break up event if they are your lover
			if = {
				limit = {
					has_relation_lover = scope:recipient
					NOT = { has_relation_rival = scope:recipient } #To enable really strange love stories
					any_character_war = {
						casus_belli = {
							primary_attacker = scope:actor
							primary_defender = scope:recipient
							any_target_title = { count >= 1 }
						}
					}
				}
				scope:recipient = {
					trigger_event = {
						id = lover.0103
						days = { 14 30 }
					}
				}
			}

			#Invalidate any wars your vassals have going against recipient atm
			scope:recipient = {
				if = {
					limit = {
						any_character_war = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
					}
					every_character_war = {
						limit = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
						show_as_tooltip = { end_war = invalidated } #Actually ended in the event
						primary_attacker = { trigger_event = war_event.1001 }
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

grant_independence_interaction = {
	category = interaction_category_vassal
	force_notification = yes
	greeting = positive
	notification_text = GRANT_INDEPENDENCE_INTERACTION_NOTIFICATION

	desc = grant_independence_interaction_desc
	
	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			is_independent_ruler = yes
			NOT = {
				is_at_war = yes
			}
		}
		custom_description = {
			text = is_at_war_with_another_vassal
			object = scope:recipient
			NOT = {
				scope:actor = {
					any_vassal_or_below = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
		custom_description = {
			text = is_de_jure_vassal_check
			object = scope:recipient
			NOT = { #Can not be used against de jure vassals
				scope:recipient.primary_title = {
					any_this_title_or_de_jure_above = {
						holder = scope:actor
					}
				}
			}
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = minor_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			hidden_effect = {	
				send_interface_toast = {
					title = grant_vassal_independence_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = grant_vassal_independence_interaction_toast_desc
				}
			}
		}

		scope:recipient = {
			#Send notifications
			if = {
				limit = {
					any_liege_or_above = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				every_liege_or_above = {
					limit = {
						is_ai = no
						NOT = { this = scope:actor }
					}
					trigger_event = vassal_interaction.0023
				}
			}
			if = {
				limit = {
					any_liege_or_above = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
				}
				every_liege_or_above = {
					limit = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
					every_vassal = {
						limit = {
							is_ai = no
							NOT = { this = scope:recipient }
						}
						trigger_event = {
							id = vassal_interaction.0022
							days = 3
						}
					}
				}
			}

			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
			}

			add_truce_both_ways = {
				character = scope:actor
				days = 3650
				name = TRUCE_GRANT_INDEPENDENCE
			}

			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
		#[Tribal Trouble]
		scope:recipient = {
			every_relation = {
				type = tribe_leader
				remove_relation_tribe_member = PREV
			}
			ordered_vassal_or_below = {
				order_by = highest_held_title_tier
				max = 1000
				check_range_bounds = no
				limit = {
					trigger_if = {
						limit = { NOT = { liege = PREV }}
						liege = {
							any_relation = { type = tribe_leader THIS = scope:recipient }
							has_government = tribal_government
						}
					}
				}
				PREV = { set_relation_tribe_member = PREV }
			}
		}
		#[/Tribal Trouble]
	}

	ai_will_do = {
		base = 0 #The AI should never do this!
	}
}