declare_war_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	special_interaction = declare_war_interaction
	interface = declare_war
	interface_priority = 70
	popup_on_receive = yes
	pause_on_receive = yes

	desc = declare_war_desc

	is_shown = {
		NOT = {
			scope:recipient = scope:actor
		}
		scope:recipient = {
			is_landed = yes
		}
		scope:actor = {
			NOT = {
				is_at_war_with = scope:recipient
			}
		}
	}

	redirect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // declare_war_interaction" debug_log_scopes = yes }
		if = {
			limit = {
				exists = scope:recipient
				scope:recipient = {
					NAND = {
						has_government = tribal_government
						any_relation = { type = tribe_leader }
						NOT = { has_realm_law = tribal_pact_protection }
					}
				}
			}
			scope:recipient.top_liege = { save_scope_as = recipient }
		}
	}

	is_valid_showing_failures_only = {
		# always = no
		scope:actor = {
			NOT = { has_trait = incapable }
			can_attack_in_hierarchy = scope:recipient
			NOT = {
				has_raised_armies = yes
			}
			has_any_display_cb_on = scope:recipient
			NOT = {
				is_allied_in_war = scope:recipient
			}
			custom_description = {
				text = "is_not_bankrupt"
				gold > 0
			}
			is_imprisoned = no
			trigger_if = {
				limit = {
					has_variable_list = subjugation_offer_under_consideration
				}
				custom_description = {
					text = is_not_considering_offer_of_subjugation
					NOT = {
						is_target_in_variable_list = {
							name = subjugation_offer_under_consideration
							target = scope:recipient
						}
					}
				}
			}
		}
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = {
			trigger_if = {
				limit = { is_imprisoned = yes }
				NOT = {
					imprisoner = scope:actor
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		custom_description = {
			text = "declare_war_hook_on_liege"
			OR = {
				war_declarer_needs_hook_on_liege = no
				always = scope:hook
			}
		}
		scope:actor = {
			NOR = {
				is_at_war_with = scope:recipient
				custom_description = { #A vassal cannot go to war against someone their Liege is already at war with
					text = liege_is_at_war_with_recipient
					object = scope:recipient
					liege = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
	}

	send_options_exclusive = no
	send_option = {
		is_shown = {
			war_declarer_needs_hook_on_liege = yes
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = liege
			}
		}
		flag = hook
		localization = WAR_LIEGE_HOOK
		can_invalidate_interaction = yes
	}
	should_use_extra_icon = {
		war_declarer_needs_hook_on_liege = yes
		scope:actor = { has_usable_hook = liege }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	on_accept = {

		scope:actor = {
			#Feedback!
			hidden_effect = {
				send_interface_toast = {
					title = declare_war_interaction_notification

					left_icon = scope:actor					
					right_icon = scope:recipient

					custom_tooltip = declare_war_interaction_notification_tooltip

					show_as_tooltip = {
						if = {
							limit = { always = scope:hook }
							use_hook = liege
						}
					}
				}
			}

			#Has the instigator promised a vassal a war (vassal.2601)?
			if = {
				limit = {
					exists = var:promised_war
					var:promised_war = {
						is_alive = yes
						NOT = { this = scope:recipient }
					}
				}
				trigger_event = {
					id = vassal.2610
					days = { 7 10 }
				}
			}

			if = {
				limit = { always = scope:hook }
				use_hook = liege
			}

			#Send break up event if they are your lover
			if = {
				limit = {
					has_relation_lover = scope:recipient
					NOT = { has_relation_rival = scope:recipient } #To enable really strange love stories
					any_character_war = {
						casus_belli = {
							primary_attacker = scope:actor
							primary_defender = scope:recipient
							any_target_title = { count >= 1 }
						}
					}
				}
				scope:recipient = {
					trigger_event = {
						id = lover.0103
						days = { 14 30 }
					}
				}
			}

			#Invalidate any wars your vassals have going against recipient atm
			scope:recipient = {
				if = {
					limit = {
						any_character_war = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
					}
					every_character_war = {
						limit = {
							primary_attacker = {
								is_vassal_or_below_of = scope:actor
								trigger_if = { #Ai should never invalidate a player's war!
									limit = {
										this = { is_ai = no }
									}
									scope:actor = {
										is_ai = no
									}
								}
							}
						}
						show_as_tooltip = { end_war = invalidated } #Actually ended in the event
						primary_attacker = { trigger_event = war_event.1001 }
					}
				}
			}
		}
	}
	
	auto_accept = yes
}


grant_independence_interaction = {
	category = interaction_category_vassal
	force_notification = yes
	greeting = positive
	notification_text = GRANT_INDEPENDENCE_INTERACTION_NOTIFICATION

	desc = grant_independence_interaction_desc
	
	is_shown = {
		scope:recipient = {
			is_vassal_of = scope:actor
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			is_independent_ruler = yes
			NOT = {
				is_at_war = yes
			}
		}
		custom_description = {
			text = is_at_war_with_another_vassal
			object = scope:recipient
			NOT = {
				scope:actor = {
					any_vassal_or_below = {
						is_at_war_with = scope:recipient
					}
				}
			}
		}
		custom_description = {
			text = is_de_jure_vassal_check
			object = scope:recipient
			NOT = { #Can not be used against de jure vassals
				scope:recipient.primary_title = {
					any_this_title_or_de_jure_above = {
						holder = scope:actor
					}
				}
			}
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = minor_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			hidden_effect = {	
				send_interface_toast = {
					title = grant_vassal_independence_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = grant_vassal_independence_interaction_toast_desc
				}
			}
		}

		scope:recipient = {
			#Send notifications
			if = {
				limit = {
					any_liege_or_above = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				every_liege_or_above = {
					limit = {
						is_ai = no
						NOT = { this = scope:actor }
					}
					trigger_event = vassal_interaction.0023
				}
			}
			if = {
				limit = {
					any_liege_or_above = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
				}
				every_liege_or_above = {
					limit = {
						any_vassal = {
							is_ai = no
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
						}
					}
					every_vassal = {
						limit = {
							is_ai = no
							NOT = { this = scope:recipient }
						}
						trigger_event = {
							id = vassal_interaction.0022
							days = 3
						}
					}
				}
			}

			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
			}

			add_truce_both_ways = {
				character = scope:actor
				days = 3650
				name = TRUCE_GRANT_INDEPENDENCE
			}

			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
		#[Tribal Trouble]
		scope:recipient = {
			every_relation = {
				type = tribe_leader
				remove_relation_tribe_member = PREV
			}
			ordered_vassal_or_below = {
				order_by = highest_held_title_tier
				max = 1000
				check_range_bounds = no
				limit = {
					trigger_if = {
						limit = { NOT = { liege = PREV }}
						liege = {
							any_relation = { type = tribe_leader THIS = scope:recipient }
							has_government = tribal_government
						}
					}
				}
				PREV = { set_relation_tribe_member = PREV }
			}
		}
		#[/Tribal Trouble]
	}

	ai_will_do = {
		base = 0 #The AI should never do this!
	}
}

grant_titles_interaction = {

	category = interaction_category_vassal
	common_interaction = yes

	desc = grant_titles_interaction_desc

	special_interaction = grant_titles_interaction
	interface = grant_titles
	target_type = title
	target_filter = actor_domain_titles
	interface_priority = 60

	# actor character giving the titles
	# recipient character receiving the titles

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:recipient = {
			OR = {
				target_is_liege_or_above = scope:actor
				is_pool_guest_of = scope:actor
			}
		}
	}
	
	is_valid_showing_failures_only = {
		scope:recipient = { can_be_granted_titles_by = { RULER = scope:actor } }
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		NOT = { scope:recipient = { has_trait = devoted } } # Monks are disinherited, and should not have land granted to them
		custom_description = {
			text = is_not_theocratic_court_chaplain
			subject = scope:recipient
			NAND = {
				scope:actor.faith = {
					has_doctrine = doctrine_theocracy_temporal
				}
				scope:recipient = {
					faith = {
						has_doctrine = doctrine_theocracy_temporal
					}
					has_council_position = councillor_court_chaplain
				}
			}
		}
		scope:actor = {
			any_held_title = {
				count > 1
			}
		}
		scope:recipient = { is_diplomatically_available = yes }
		trigger_if = {
			limit = {
				scope:recipient = {
					is_ruler = no
				}
			}
			scope:recipient = {
				is_imprisoned = no
			}
		}
		#[Tribal Trouble]
		trigger_if = {
			limit = { scope:actor = { has_government = tribal_government }}
			OR = {
				scope:actor = { has_realm_law = tribal_legitimacy_de_jure }
				scope:recipient = { is_landed = no }
			}
		}
		#[/Tribal Trouble]
	}
	
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			trigger_if = {
				limit = {
					scope:recipient = scope:actor.player_heir
					scope:actor = { has_partition_succession_realm_law_trigger = yes }
				}
				custom_description = {
					text = partition_primary_heir_unfair
					subject = scope:recipient
					current_heir = scope:recipient
				}
			}
		}

		custom_description = {
			text = grant_titles_interaction_children_not_allowed_temple 
			subject = scope:recipient
			NOR = {
				AND = {
					scope:recipient = {
						is_adult = no
					}
					scope:target = {
						tier = tier_barony
						title_province = { has_building_with_flag = temple }
					}
				}
				AND = {
					scope:recipient = {
						is_adult = no
					}
					scope:target = {
						tier = tier_county 

						title_province = { 
							is_county_capital = yes
							has_building_with_flag = temple 
						}
					}
				}
			}
		}
	}

	auto_accept = yes

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0110
		}
	}
	
	on_accept = {
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = this_title
			if = {
				limit = {
					exists = scope:landed_title
				}
				scope:recipient = {
					if = {
						limit = {
							scope:this_title.tier = tier_barony
						}

						hidden_effect = {
							add_opinion = {
								target = scope:actor
								modifier = received_title_barony
							}
						}

						scope:this_title = { add_to_temporary_list = titles_to_grant }

						hidden_effect = {
							if = {
								limit = {
									is_a_faction_member = yes
								}
								add_joined_faction_discontent = -5
							}
						}
					}

					else_if = {
						limit = {
							scope:this_title.tier = tier_county
						}

						hidden_effect = {
							add_opinion = {
								target = scope:actor
								modifier = received_title_county
							}
						}

						scope:this_title = { add_to_temporary_list = titles_to_grant }

						hidden_effect = {
							if = {
								limit = {
									is_a_faction_member = yes
								}
								add_joined_faction_discontent = -10
							}
						}
					}

					else_if = {
						limit = {
							scope:this_title.tier = tier_duchy
						}

						hidden_effect = {
							add_opinion = {
								target = scope:actor
								modifier = received_title_duchy
							}
						}

						scope:this_title = { add_to_temporary_list = titles_to_grant }

						hidden_effect = {
							if = {
								limit = {
									is_a_faction_member = yes
								}
								add_joined_faction_discontent = -20
							}
						}
					}

					else_if = {
						limit = {
							scope:this_title.tier = tier_kingdom
						}

						hidden_effect = {
							add_opinion = {
								target = scope:actor
								modifier = received_title_kingdom
							}
						}

						scope:this_title = { add_to_temporary_list = titles_to_grant }

						hidden_effect = {
							if = {
								limit = {
									is_a_faction_member = yes
								}
								add_joined_faction_discontent = -40
							}
						}
					}

					else_if = {
						limit = { scope:this_title.tier = tier_empire }

						add_opinion = {
							target = scope:actor
							modifier = received_title_empire
						}

						hidden_effect = {
							if = {
								limit = {
									is_a_faction_member = yes
								}
								add_joined_faction_discontent = -60
							}
						}

						scope:this_title = { add_to_temporary_list = titles_to_grant }
					}
				}

				#Promised a vassal this title they had a claim on (vassal.2901)
				if = {
					limit = {
						scope:actor = {
							exists = var:was_promised_title
							var:was_promised_title = scope:recipient
						}
					}
					if = {
						limit = {
							scope:recipient = {
								exists = var:promised_title
							}
							scope:landed_title = scope:recipient.var:promised_title
						}
						scope:actor = {
							trigger_event = {
								id = vassal.2910
								days = { 7 14 }
							}
						}
					}
				}
			}
			if = {
				limit = {
					scope:recipient = {
						has_trait = bastard
					}
				}
				custom_tooltip = grant_title_to_bastard_dynasty_warning
			}
		}
		
		if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier = tier_empire
				}
			}
			custom_tooltip = grant_title_modifier_stack_empires
		}
		if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier = tier_kingdom
				}
			}
			custom_tooltip = grant_title_modifier_stack_kingdoms
		}
		if = {
			limit = {
				any_in_list = {
					list = titles_to_grant
					tier = tier_duchy
				}
			}
			custom_tooltip = grant_title_modifier_stack_duchies
		}
		if = {
			limit = {
				any_in_list = {
					list = titles_to_grant
					tier = tier_county
				}
			}
			custom_tooltip = grant_title_modifier_stack_counties
		}
		if = {
			limit = {
				any_in_list = {
					list = titles_to_grant
					tier = tier_barony
				}
			}
			custom_tooltip = grant_title_modifier_stack_baronies
		}
		if = {
			limit = {
				scope:recipient = { is_a_faction_member = yes }
			}
			custom_tooltip = grant_title_modifier_stack_discontent
		}

		#Stress impact
		scope:actor = {
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						trigger_if = {
							limit = { tier = tier_barony }
							title_province.barony = {
								has_wrong_holding_type = no
							}
						}
						count >= 1
					}
				}

				# Gnostics lose stress for giving away titles.
				if = {
					limit = {
						scope:actor = {
							faith = {
								has_doctrine_parameter = granting_titles_gives_stress
							}
						}
					}
					scope:actor = {
						add_stress = {
							value = 0

							# Base stress value scaled on title tier.
							every_in_list = {
								list = target_titles

								add = {
									value = 0

									if = {
										limit = { this.tier = tier_county }
										add = minor_stress_loss # 10 base
									}
									else_if = {
										limit = { this.tier = tier_duchy }
										add = {
											value = medium_stress_loss
											multiply = 1.25 # 25 base
										}
									}
									else_if = {
										limit = { this.tier = tier_kingdom }
										add = {
											value = major_stress_loss
											multiply = 2 # 80 base
										}
									}
									else_if = {
										limit = { this.tier = tier_empire }
										add = {
											value = monumental_stress_loss 
											multiply = 2 # 200 base
										}
									}

									# Lose more stress for giving away titles of your primary tier; lose less stress for giving away titles far below your primary in tier.
									multiply = {
										value = this.tier
										add = 1
										divide = scope:actor.primary_title.tier
									}

									# Round to the nearest multiple of 5.
									divide = 5
									round = yes
									multiply = 5

									# For a Duke, this will be x1.25 for Duchies (-30) and x1 for Counties(-10)
									# For a King, this will be x1.25 for a Kingdom (-100), x1 for a Duchy (-25) and x0.75 for Counties(-10)
									# For an Emperor, this will be x1.25 for an Empire(-200), x1 for a Kingdom(-80), x0.75 for a Duchy(-20) and x0.4 for a Counties (-5)
								}
							}
						}
					}
				}

				# Greedy & ambitious ruler gain stress for giving away titles if they would normally be able to keep them.
				if = {
					limit = {
						# Pre-filter 
						OR = {
							has_trait = greedy
							has_trait = ambitious
						}
						domain_size <= domain_limit # Not over my domain limit
						any_in_list = {
							list = target_titles
							tier <= tier_county # At least 1 selected title counts toward domain limit
						}

						# Special exemption for lieges who are over their held duchy limit, which are giving away that duchy (and associated counties) specifically
						trigger_if = {
							limit = {
								has_too_many_held_duchies_trigger = yes
							}
							NOT = {				
								# Granting at least 1 duchy
								any_in_list = {
									list = target_titles
									title_counts_towards_too_many_duchies_trigger = yes
									save_temporary_scope_as = granted_duchy

									# All counties being granted are De Jure part of the duchy that is being granted
									any_in_list = {
										list = target_titles
										count = all 
										trigger_if = {
											limit = { tier = tier_county}
											de_jure_liege = scope:granted_duchy
										}
									}
								}
							}
						}
					}
					# Actual stress gain effects
					if = {
						limit = {
							domain_size = domain_limit
						}
						stress_impact = {
							greedy = minor_stress_impact_gain
							ambitious = minor_stress_impact_gain
						}
					}
					else_if = {
						limit = {
							domain_size < domain_limit
						}
						stress_impact = {
							greedy = medium_stress_impact_gain
							ambitious = medium_stress_impact_gain
						}
					}
				}
			}

			if = {
				limit = {
					# Use expanded version if we have FP1.
					has_fp1_dlc_trigger = yes
					fp1_remove_stele_new_holder_trigger = { TITLE = scope:target }
				}
				custom_tooltip = runestone_grant_title_warning
			}
			else_if = {
				limit = {
					scope:target = { exists = var:ancestor_to_bury }
					NOT = { dynasty = scope:previous_holder.dynasty } #We only have to change something if the new holder is of a different dynasty
				}
				custom_tooltip = runestone_grant_title_warning	
			}

			#Feedback for actor
			hidden_effect = {
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							count = 1
							NOT = { tier = scope:actor.highest_held_title_tier }
						}
						scope:recipient = {
							any_held_title = {
								tier > tier_barony
								NOT = {
									is_in_list = target_titles
								}
							}
						}
					}
					random_in_list = {
						list = target_titles
						save_temporary_scope_as = loc_title
					}
					send_interface_toast = {
						title = grant_titles_interaction_notification
					
						left_icon = scope:actor					
						right_icon = scope:recipient
					
						custom_tooltip = grant_titles_interaction_notification_effect_2
					}
				}
				else_if = {
					limit = {
						any_in_list = {
							list = target_titles
							count > 1
							NOT = { tier = scope:actor.highest_held_title_tier }
						}
						scope:recipient = {
							any_held_title = {
								tier > tier_barony
								NOT = {
									is_in_list = target_titles
								}
							}
						}
					}
					random_in_list = {
						list = target_titles
						save_temporary_scope_as = loc_title
					}
					send_interface_toast = {
						title = grant_titles_interaction_notification
					
						left_icon = scope:actor					
						right_icon = scope:recipient
					
						custom_tooltip = grant_titles_interaction_notification_effect_3
					}
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_in_list = { #Became independent from you, but still have the same liege
								list = target_titles
								tier = scope:actor.highest_held_title_tier
							}
							top_liege = scope:actor.top_liege
						}
					}
					send_interface_toast = {
						title = grant_titles_interaction_notification
					
						left_icon = scope:actor					
						right_icon = scope:recipient
					
						custom_tooltip = grant_titles_interaction_notification_effect_5
					}
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_in_list = { #Became independent
								list = target_titles
								tier = scope:actor.highest_held_title_tier
							}
						}
					}
					send_interface_toast = {
						title = grant_titles_interaction_notification
					
						left_icon = scope:actor					
						right_icon = scope:recipient
					
						custom_tooltip = grant_titles_interaction_notification_effect_4
					}
				}
				else = {
					send_interface_toast = {
						title = grant_titles_interaction_notification

						left_icon = scope:actor					
						right_icon = scope:recipient

						custom_tooltip = grant_titles_interaction_notification_effect
					}
				}
			}
		}
	}
}

offer_vassalization_interaction = {
	category = interaction_category_vassal


	desc = offer_vassalization_interaction_desc
	
	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 48

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			is_landed = yes
			is_independent_ruler = yes
			highest_held_title_tier < scope:actor.highest_held_title_tier
			NOT = { government_has_flag = can_not_be_vassal_or_liege }
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_at_war = no

			custom_description = {
				text = was_recently_granted_independence
				NOT = {
					has_opinion_modifier = {
						modifier = granted_independence_opinion
						target = scope:actor
					}
				}
			}
		}
	}

	greeting = positive
	notification_text = OFFER_VASSALIZATION_INTERACTION_NOTIFICATION

	ai_min_reply_days = 5
	ai_max_reply_days = 10

	ai_accept = {
		base = -45
		#MAIN
		#Heretic/Infidel modifier.
		#Tier difference modifier.
		#Dejure modifier.
		#Distant/Remote Realm modifier.
		#Military power difference modifier.

		#MINOR
		#Rivalry modifier.
		#Same Dynasty modifier.
		#Cultural/Cultural Group modifiers.
		#Ageism modifier vs kids.
		#Ruler Legitimacy modifier.
		#Claimant modifier.

		#OPINION SCALES
		#Dread
		#Compare Opinion modifier.
		
		# PERKS
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		# MAIN
		modifier = { #Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:actor.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -40
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -40
				}
			}
		}
		
		modifier = { #Different faith, pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					NOT = {
						scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -20
				}
			}
		}
		
		modifier = { #Different faith, both have pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -10
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -50
		}
		modifier = { #We just fought against each other.
			desc = offer_vassalization_interaction_aibehavior_recent_war_tt
			trigger = {
				scope:recipient = {
					any_truce_holder = {
						this = scope:actor
					}
				}
			}
			add = -40
		}
		modifier = { #I fought an independence war against you.
			desc = offer_vassalization_interaction_aibehavior_independence_war_tt
			trigger = {
				scope:recipient = {
					exists = var:independence_war_former_liege
					var:independence_war_former_liege = scope:actor
				}
			}
			add = -100
		}
		modifier = { #Wide difference in rank
			desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
			trigger = {
				scope:actor = {
					tier_difference = {
						target = scope:recipient
						value > 1
					}
				}
			}
			add = 5
		}
		modifier = { # Is the Rightful Liege of recipient
			desc = offer_vassalization_interaction_aibehavior_rightfulliegetitleholder_tt
			trigger = {
				is_rightful_liege_of_trigger = {
					VASSAL = scope:recipient
					LIEGE = scope:actor
				}
			}
			add = 10
		}
		modifier = { #Is not the Rightful Liege of recipient
			desc = offer_vassalization_interaction_aibehavior_not_rightfulliegetitleholder_tt
			trigger = {
				NOT = {
					is_rightful_liege_of_trigger = {
						VASSAL = scope:recipient
						LIEGE = scope:actor
					}
				}
			}
			add = -25
		}
		modifier = { #Distant Realm.
			desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
			trigger = {
				scope:actor = {
					character_is_realm_neighbor = scope:recipient
					NOT = {
						character_is_land_realm_neighbor = scope:recipient
					}
				}
			}
			add = -100
		}
		modifier = { #Remote Realm.
			desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						character_is_realm_neighbor = scope:recipient
					}
				}
				scope:recipient.capital_province = { squared_distance = { target = scope:actor.capital_province value >= 200000 } }
			}
			add = -500
		}
		modifier = {
		desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 20
				ceiling = yes
	  		}
		}

		# MINOR
		modifier = { #Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_friend = scope:actor
					NOT = { has_relation_best_friend = scope:actor }
				}
			}
			add = 10
		}
		modifier = { #Best Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_best_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_best_friend = scope:actor
				}
			}
			add = 20
		}
		modifier = { #Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { #Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -1000
		}
		modifier = { #Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 5
		}
		modifier = { #Cultural modifiers.
			add = -10
			desc = offer_vassalization_interaction_aibehavior_culture_tt
			trigger = {
				scope:actor = {
					has_same_culture_group_as = scope:recipient
					NOT = { has_same_culture_as = scope:recipient }
				}
			}
		}
		
		modifier = { #Cultural Group modifiers.
			add = -30
			desc = offer_vassalization_interaction_aibehavior_culture_group_tt
			trigger = {
				scope:actor = {
					NOT = { has_same_culture_group_as = scope:recipient }
				}
			}
		}
		modifier = { #Ageism modifier vs kids.
			desc = offer_vassalization_interaction_aibehavior_child_tt
			trigger = {
				scope:actor = {
					age < 12
				}
				scope:recipient = {
					age > 16
				}
			}
			add = -5
		}
		modifier = { #Illegitimacy modifier.
			desc = offer_vassalization_interaction_aibehavior_illegitimate_tt
			trigger = {
				OR = {
					AND = {
						scope:actor = {
							has_trait = bastard
						}
						scope:recipient = {
							faith = { NOT = { has_doctrine = doctrine_bastardry_none } }
						}
					}
					has_trait = denounced
					has_trait = disinherited
				}
			}
			add = -10
		}

		modifier = { #Claimant modifier.
			desc = offer_vassalization_interaction_aibehavior_claimant_tt
			trigger = {
				scope:actor.primary_title = {
					scope:recipient = {
						has_claim_on = prev
					}
				}
			}
			add = -15
		}

		# OPINION INFLUENCE
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		opinion_modifier = { #Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.35
		}

		# CONTRACT OPTIONS
		modifier = {
			add = 60
			scope:recipient = {	has_government = feudal_government }
			scope:religious_exemption = yes
			desc = CONTRACT_RELIGIOUS_EXEMPTION_REASON
		}
		modifier = {
			add = 30
			scope:recipient = {	has_government = feudal_government }
			scope:low_obligations = yes
			desc = CONTRACT_LOW_TAXES_REASON
		}
		modifier = {
			add = -40
			scope:recipient = {	has_government = feudal_government }
			scope:high_obligations = yes
			desc = CONTRACT_HIGH_TAXES_REASON
		}
	}

	# Low starting obligations
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = low_obligations
		localization = low_obligations	
	}

	# Medium starting obligations
	send_option = {										
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = normal_obligations								# If selected then scope:flag_name will be set to yes
		localization = normal_obligations				# Loc_key for option label
		starts_enabled = { always = yes	}				# Trigger for whether this should be on when the window opens. If not defined, defaults to off

	}

	# High starting obligations
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		flag = high_obligations								# If selected then scope:flag_name will be set to yes
		localization = high_obligations					# Loc_key for option label
	}

	# Low starting obligations + religious exemption
	send_option = {
		is_shown = {
			scope:recipient = {
				has_government = feudal_government
			}
		}
		is_valid = {
			NOT = { scope:recipient.faith = scope:actor.faith }
		}
		flag = religious_exemption
		localization = religious_exemption
	}

	send_option = { # Needed so that the AI can use the interaction
        is_shown = {
            scope:recipient = {
                NOT = {
                    has_government = feudal_government
                }
            }
            scope:actor = {
                is_ai = yes
            }
        }
        flag = no_flag
        localization = SCOPE_EMPTY
    }

	send_options_exclusive = yes

	on_accept = {
		offer_vassalization_interaction_effect = yes
		scope:actor = {
			trigger_event = char_interaction.0001
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0002
		}
	}
	
	ai_potential = {
		is_adult = yes
		is_independent_ruler = yes
		highest_held_title_tier > tier_county
	}

	ai_will_do = {
		base = 100

		# AI prefers to receive higher obligations from their vassals when possible.
		modifier = {
			add = 2
			scope:low_obligations = yes
		}

		modifier = {
			add = 3
			scope:normal_obligations = yes
		}

		modifier = {
			add = 4
			scope:high_obligations = yes
		}

		# Cynical rulers are happy to offer religious protection to potential vassals, but only when it makes them accept a vassalization offer they would otherwise refuse.
		# Zealous rulers become increasingly reluctant to offer religious protection, as they want to enforce religious homogeneity in their realm.
		modifier = {
			add = {
				value = ai_zeal
				multiply = -2
				max = 1
			}
			scope:religious_exemption = yes
		}


		modifier = { # If the recipient is a player, do not bother sending
			factor = 0
			scope:recipient = {
				is_ai = no
			}
		}
	}
}