# The entry should be named in the same way that the elective succession law is named to define it's voter's logic.
# Root scope - Elector, the character voting in the election.
# scope:candidate scope - Candidate, Character considered for the title.
# scope:title scope - Title, The title the nomination is for.
# scope:holder scope - Ruler, The ruler currently holding the title.
# scope:holder_candidate scope - Favored Candidate, The title owner's candidate.
# The voter will vote for the top score candidate calculated from this script.

tribal_elective_military_strength = { #Thing
	elector_vote_strength = { base = 1 }
	
	electors = { add = holder }

	candidate_score = {
		base = 0
		modifier = {
			add = max_military_strength
		}
	}
	
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_direct_vassals
			limit = {
				save_temporary_scope_as = potential_candidate
				max_military_strength > scope:holder.max_military_strength
				scope:holder = {
					any_vassal = {
						max_military_strength > scope:potential_candidate.max_military_strength
						count = 0
					}
				}
			}
		}
		add = {
			type = holder_close_or_extended_family
			limit = {
				THIS = scope:holder.primary_heir
				scope:holder = {
					any_vassal = {
						max_military_strength > PREV.max_military_strength
						count = 0
					}
				}
			}
		}
	}
}

tribal_elective_military_strength = { #Thing
	elector_vote_strength = { base = 1 }
	
	electors = { add = holder }

	candidate_score = {
		base = 0
		modifier = {
			add = prowess
		}
	}
	
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_direct_vassals
			limit = {
				save_temporary_scope_as = potential_candidate
				max_military_strength > scope:holder.max_military_strength
				scope:holder = {
					any_vassal = {
						max_military_strength > scope:potential_candidate.max_military_strength
						count = 0
					}
				}
			}
		}
		add = {
			type = holder_close_or_extended_family
			limit = {
				exists = scope:holder.primary_heir
				THIS = scope:holder.primary_heir
				scope:holder = {
					any_vassal = {
						max_military_strength > PREV.max_military_strength
						count = 0
					}
				}
			}
		}
	}
}