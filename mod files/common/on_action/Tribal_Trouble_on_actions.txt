on_game_start_after_lobby = {
	on_actions = {
		on_game_start_tribal_trouble_setup
		yearly_feudalization_pressure
		on_game_start_tribal_trouble_pacts
	}
}

yearly_global_pulse = {
	on_actions = {
		yearly_feudalization_pressure
	}
}

on_dynasty_created = {
	on_actions = {
		on_dynasty_created_dynasty_listing
	}
}

on_dynasty_created_dynasty_listing = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_dynasty_created_dynasty_listing" }
		debug_log_scopes = no
		add_to_global_variable_list = {
			name = dynasties
			target = THIS
		}
	}
}

on_game_start_tribal_trouble_setup = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_game_start_tribal_trouble_setup" }
		every_county = {
			set_variable = {
				name = neighboring_counties
				value = {
					every_neighboring_county = { add = 1 }
					min = 1
				}
			}
		}
		# Initialize dynasties global variable list
		every_ruler = {
			if = {
				limit = { exists = dynasty }
				dynasty = {
					add_to_global_variable_list = {
						name = dynasties
						target = THIS
					}
				}
			}
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_game_start_tribal_trouble_setup end" }
	}
}

yearly_feudalization_pressure = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // yearly_feudalization_pressure" }
		every_culture_global = {
			set_variable = {
				name = tribal_county
				value = 0
			}
			set_variable = {
				name = total_county
				value = 0
			}
		}
		every_religion_global = {
			every_faith = {
				set_variable = {
					name = tribal_county
					value = 0
				}
				set_variable = {
					name = total_county
					value = 0
				}
			}
		}
		every_in_global_list = {
			variable = dynasties
			set_variable = {
				name = tribal_county
				value = 0
			}
			set_variable = {
				name = total_county
				value = 0
			}
		}
		every_ruler = {
			if = {
				limit = { exists = var:total_county }
				remove_variable = total_county
			}
			if = {
				limit = { exists = var:tribal_county }
				remove_variable = tribal_county
			}
		}
		every_county = {
			culture = {
				change_variable = {
					name = total_county
					add = 1
				}
			}
			faith = {
				change_variable = {
					name = total_county
					add = 1
				}
			}
			if = {
				limit = {
					holder = { is_lowborn = no }					
					exists = holder.dynasty.var:total_county
				}
				holder.dynasty = {
					change_variable = {
						name = total_county
						add = 1
					}
				}
			}
			if = {
				limit = { exists = holder.var:total_county }
				holder = {
					change_variable = {
						name = total_county
						add = 1
					}
				}
			}
			else = {
				holder = {
					set_variable = {
						name = total_county
						value = 1
					}
					set_variable = {
						name = tribal_county
						value = 1
					}
				}
			}
			if = {
				# limit = { holder = { has_government = tribal_government }}
				limit = { any_county_province = { has_holding_type = tribal_holding }}
				culture = {
					change_variable = {
						name = tribal_county
						add = 1
					}
				}
				faith = {
					change_variable = {
						name = tribal_county
						add = 1
					}
				}
				if = {
					limit = {
						holder = { is_lowborn = no }					
						exists = holder.dynasty.var:total_county
					}
					holder.dynasty = {
						change_variable = {
							name = tribal_county
							add = 1
						}
					}
				}
				if = {
					limit = { exists = holder.var:total_county }
					holder = {
						change_variable = {
							name = tribal_county
							add = 1
						}
					}
				}
				else = {
					holder = {
						set_variable = {
							name = tribal_county
							value = 1
						}
					}
				}
			}
		}
		every_culture_global = {
			set_variable = {
				name = feudalization
				value = {
					add = var:total_county
					subtract = var:tribal_county
					divide = {
						add = var:total_county
						min = 1
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				set_variable = {
					name = feudalization
					value = {
						add = var:total_county
						subtract = var:tribal_county
						divide = {
							add = var:total_county
							min = 1
						}
					}
				}
			}
		}
		every_in_global_list = {
			variable = dynasties
			set_variable = {
				name = feudalization
				value = {
					add = var:total_county
					subtract = var:tribal_county
					divide = {
						add = var:total_county
						min = 1
					}
				}
			}
		}
		tribal_trouble_mapmode_feudalization = yes
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // yearly_feudalization_pressure end" }
	}
}

on_game_start_tribal_trouble_pacts = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_game_start_tribal_trouble_pacts" }
		ordered_ruler = {
			max = 5000
			check_range_bounds = no
			order_by = highest_held_title_tier
			# Set tribal relation with vassals, set starting laws
			if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_game_start_tribal_trouble_pacts [Scope.Char.GetName]" }
			if = {
				limit = {
					has_government = tribal_government
					# highest_held_title_tier >= tier_duchy
					OR = {
						is_independent_ruler = yes
						NOT = { liege = { has_government = tribal_government }}
					}
					is_alive = yes
				}
				if = { limit = { debug_only = yes } debug_log_scopes = no }
				# set_variable = { name = tribe_leader value = THIS }
				ordered_vassal_or_below = {
					order_by = highest_held_title_tier
					max = 1000
					check_range_bounds = no
					limit = {
						trigger_if = {
							limit = { NOT = { liege = PREV }}
							liege = {
								any_relation = { type = tribe_leader THIS = ROOT }
								has_government = tribal_government
							}
						}
					}
					PREV = { set_relation_tribe_member = PREV }
				}
				set_starting_tribal_laws = yes
				if = {
					limit = {
						any_held_title = {
							is_titular = no
							tier >= tier_duchy
						}
						NOT = { has_realm_law = tribal_legitimacy_de_jure }
					}
					every_held_title = {
						limit = {
							is_titular = no
							tier >= tier_duchy
						}
						add_to_list = titles_to_destroy
					}
					switch = {
						trigger = primary_title.tier
						tier_empire = { create_titular_empire = yes }
						tier_kingdom = { create_titular_kingdom = yes }
						tier_duchy = { create_titular_duchy = yes }
						tier_county = {}
					}
					every_in_list = {
						list = titles_to_destroy
						limit = { is_title_created = yes }
						PREV = { destroy_title = PREV }
					}
				}
			}
			# Tribal counts create a titular duchy when possible, then give out their extra counties
			if = {
				limit = {
					has_government = tribal_government
					domain_size > domain_limit
				}
				if = {
					limit = {
						highest_held_title_tier = tier_county
						OR = {
							is_independent_ruler = yes
							liege.highest_held_title_tier >= tier_kingdom
						}
					}
					create_titular_duchy = yes
				}
				hand_out_counties = yes
			}
			if = {
				limit = { has_government = tribal_government }
				switch = {
					trigger = primary_title.tier
					tier_county = { add_character_modifier = tribal_count_modifier }
					tier_duchy = { add_character_modifier = tribal_duke_modifier }
					tier_kingdom = { add_character_modifier = tribal_king_modifier }
					tier_empire = { add_character_modifier = tribal_emperor_modifier }
				}
				switch = {
					trigger = this.prestige_level
					0 = { add_character_modifier = tribal_prestige_level_0 }
					1 = { add_character_modifier = tribal_prestige_level_1 }
					2 = { add_character_modifier = tribal_prestige_level_2 }
					3 = { add_character_modifier = tribal_prestige_level_3 }
					4 = { add_character_modifier = tribal_prestige_level_4 }
					5 = { add_character_modifier = tribal_prestige_level_5 }
				}
			}
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_game_start_tribal_trouble_pacts end" }
	}
}

on_title_gain = {
	on_actions = {
		on_title_gain_join_pact
		on_title_gain_tribal_duchy
		on_realm_size_up_tribal_kingdom
		on_realm_size_up_tribal_empire
	}
}

on_title_lost = {
	on_actions = {
		on_title_lost_tribal_duchy
		on_title_lost_tribal_kingdom
		on_title_lost_leave_pact
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain_join_pact = {
	trigger = {
		trigger_if = {
			limit = { NOT = { has_government = tribal_government }}
			liege = { has_government = tribal_government }
		}
		scope:transfer_type = flag:granted
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_gain_join_pact" debug_log_scopes = no }
		scope:previous_holder = {
			if = {
				limit = {
					any_relation = {
						type = tribe_leader
						NOT = {
							any_relation = {
								type = tribe_member
								THIS = ROOT
							}
						}
					}
				}
				ordered_relation = {
					type = tribe_leader
					position = 0
					set_relation_tribe_member = ROOT
				}
			}
			else_if = {
				limit = {
					NOT = {
						any_relation = {
							type = tribe_member
							THIS = ROOT
						}
					}
				}
				set_relation_tribe_member = ROOT
			}
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_gain_join_pact end" }
	}
}

on_title_lost_leave_pact = {
	trigger = {
		is_landed = no
		any_relation = { type = tribe_leader }
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_leave_pact" debug_log_scopes = no }
		every_relation = {
			type = tribe_leader
			remove_relation_tribe_member = PREV
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_leave_pact end" }
	}
}

on_title_gain_tribal_duchy = {
	trigger = {
		has_government = tribal_government
		highest_held_title_tier = tier_county
		domain_size > domain_limit
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_gain_tribal_duchy" debug_log_scopes = no }
		if = {
			limit = {
				OR = {
					is_independent_ruler = yes
					liege.highest_held_title_tier >= tier_kingdom
				}
			}
			create_titular_duchy = yes
		}
		else_if = {
			limit = { is_ai = yes }
			hand_out_counties = yes
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_gain_tribal_duchy end" }
	}
}

on_realm_size_up_tribal_kingdom = {
	trigger = {
		has_government = tribal_government
		NOT = { has_realm_law = tribal_legitimacy_de_jure }
		highest_held_title_tier < tier_kingdom
		sub_realm_size >= 10
		sub_realm_size < 50            
		NOT = { current_date.compare_value = game_start_date }
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_realm_size_up_tribal_kingdom" debug_log_scopes = no }
		primary_title = { save_scope_as = title_to_destroy }
		create_titular_kingdom = yes
		if = {
			limit = { scope:title_to_destroy = { is_title_created = yes }}
			scope:title_to_destroy = { debug_log_scopes = no }
			destroy_title = scope:title_to_destroy
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_realm_size_up_tribal_kingdom end" }
	}
}

on_realm_size_up_tribal_empire = {
	trigger = {
		has_government = tribal_government
		NOT = { has_realm_law = tribal_legitimacy_de_jure }
		highest_held_title_tier < tier_empire
		sub_realm_size >= 50
		NOT = { current_date.compare_value = game_start_date }                            
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_realm_size_up_tribal_empire" debug_log_scopes = no }
		primary_title = { save_scope_as = title_to_destroy }
		create_titular_empire = yes
		if = {
			limit = { scope:title_to_destroy = { is_title_created = yes }}
			destroy_title = scope:title_to_destroy
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_realm_size_up_tribal_empire end" }
	}
}

on_title_lost_tribal_duchy = {
	trigger = {
		has_government = tribal_government
		highest_held_title_tier >= tier_kingdom
		has_realm_law = tribal_legitimacy_challenged
		sub_realm_size < 10
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_tribal_duchy // [Scope.Char.GetName]" }
		if = {
			limit = { primary_title = { is_titular = yes }}
			save_scope_as = title_to_destroy
		}
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = no
		}
		if = {
			limit = { is_independent_ruler = yes }
			every_vassal = {
				limit = { highest_held_title_tier >= tier_duchy }
				becomes_independent = { change = scope:change }
				PREV = { remove_relation_tribe_member = PREV }
				save_scope_as = new_tribe_leader
				ordered_vassal_or_below = {
					order_by = highest_held_title_tier
					max = 1000
					check_range_bounds = no
					limit = {
						trigger_if = {
							limit = { NOT = { liege = scope:new_tribe_leader }}
							liege = {
								any_relation = { type = tribe_leader THIS = scope:new_tribe_leader }
								has_government = tribal_government
							}
						}
					}
					scope:new_tribe_leader = { set_relation_tribe_member = PREV }
				}
			}
		}
		else = {
			every_vassal = {
				limit = { highest_held_title_tier >= tier_duchy }
				change_liege = {
					liege = PREV.liege
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		create_titular_duchy = yes
		if = {
			limit = { exists = scope:title_to_destroy }
			destroy_title = scope:title_to_destroy
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_tribal_duchy end" }
	}
}

on_title_lost_tribal_kingdom = {
	trigger = {
		has_government = tribal_government
		highest_held_title_tier >= tier_empire
		has_realm_law = tribal_legitimacy_challenged
		sub_realm_size < 25
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_tribal_kingdom // [Scope.Char.GetName]" }
		if = {
			limit = { primary_title = { is_titular = yes }}
			save_scope_as = title_to_destroy
		}
		
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = no
		}
		if = {
			limit = { is_independent_ruler = yes }
			every_vassal = {
				limit = { highest_held_title_tier >= tier_kingdom }
				becomes_independent = { change = scope:change }
				PREV = { remove_relation_tribe_member = PREV }
				save_scope_as = new_tribe_leader
				ordered_vassal_or_below = {
					order_by = highest_held_title_tier
					max = 1000
					check_range_bounds = no
					limit = {
						trigger_if = {
							limit = { NOT = { liege = scope:new_tribe_leader }}
							liege = {
								any_relation = { type = tribe_leader THIS = scope:new_tribe_leader }
								has_government = tribal_government
							}
						}
					}
					scope:new_tribe_leader = { set_relation_tribe_member = PREV }
				}
			}
		}
		else = {
			every_vassal = {
				limit = { highest_held_title_tier >= tier_kingdom }
				change_liege = {
					liege = PREV.liege
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		create_titular_kingdom = yes
		if = {
			limit = { exists = scope:title_to_destroy }
			destroy_title = scope:title_to_destroy
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_title_lost_tribal_kingdom end" }
	}
}

on_vassal_gained = {
	on_actions = {
		on_vassal_gained_tribal_pact
		on_realm_size_up_tribal_kingdom
		on_realm_size_up_tribal_empire
	}
}

on_rank_up = {
	on_actions = {
		on_rank_up_tribal_pact
		on_rank_change_tribal_ruler
	}
}

on_rank_down = {
	on_actions = {
		on_rank_change_tribal_ruler
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained_tribal_pact = {
	trigger = { has_government = tribal_government }
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_vassal_gained_tribal_pact // liege [Scope.Char.GetName] vassal [vassal.GetName]" }
		if = {
			limit = { any_relation = { type = tribe_leader }}
			ordered_relation = {
				type = tribe_leader
				limit = { NOT = { has_relation_tribe_member = scope:vassal }}
				position = 0
				set_relation_tribe_member = scope:vassal
			}
		}
		else_if = {
			limit = { NOT = { has_relation_tribe_member = scope:vassal }}
			set_relation_tribe_member = scope:vassal 
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_vassal_gained_tribal_pact end" }
	}
}

on_rank_up_tribal_pact = {
	trigger = {
		any_relation = {
			type = tribe_leader
			NOT = { is_liege_or_above_of = PREV }
		}
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_rank_up_tribal_pact // [Scope.Char.GetName]" }
		every_relation = {
			type = tribe_leader
			limit = { NOT = { is_liege_or_above_of = PREV }}
			remove_relation_tribe_member = PREV
		}
		ordered_vassal_or_below = {
			order_by = highest_held_title_tier
			max = 1000
			check_range_bounds = no
			limit = {
				trigger_if = {
					limit = { NOT = { liege = ROOT }}
					liege = {
						any_relation = { type = tribe_leader THIS = ROOT }
						has_government = tribal_government
					}
				}
			}
			PREV = { set_relation_tribe_member = PREV }
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_rank_up_tribal_pact end" }
	}
}

on_rank_change_tribal_ruler = {
	trigger = {
		has_government = tribal_government
		is_landed = yes
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_rank_change_tribal_ruler // [Scope.Char.GetName]" }
		remove_character_modifier = tribal_count_modifier
		remove_character_modifier = tribal_duke_modifier
		remove_character_modifier = tribal_king_modifier
		remove_character_modifier = tribal_emperor_modifier
		switch = {
			trigger = primary_title.tier
			tier_county = { add_character_modifier = tribal_count_modifier }
			tier_duchy = { add_character_modifier = tribal_duke_modifier }
			tier_kingdom = { add_character_modifier = tribal_king_modifier }
			tier_empire = { add_character_modifier = tribal_emperor_modifier }
		}
	}
}

on_prestige_level_gain = {
	on_actions = {
		on_prestige_level_change_tribal
	}
}

on_prestige_level_loss = {
	on_actions = {
		on_prestige_level_change_tribal
	}
}

on_prestige_level_change_tribal = {
	trigger = {
		is_landed = yes
		has_government = tribal_government
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_prestige_level_change_tribal // [Scope.Char.GetName]" }
		remove_character_modifier = tribal_prestige_level_0
		remove_character_modifier = tribal_prestige_level_1
		remove_character_modifier = tribal_prestige_level_2
		remove_character_modifier = tribal_prestige_level_3
		remove_character_modifier = tribal_prestige_level_4
		remove_character_modifier = tribal_prestige_level_5
		switch = {
			trigger = this.prestige_level
			0 = { add_character_modifier = tribal_prestige_level_0 }
			1 = { add_character_modifier = tribal_prestige_level_1 }
			2 = { add_character_modifier = tribal_prestige_level_2 }
			3 = { add_character_modifier = tribal_prestige_level_3 }
			4 = { add_character_modifier = tribal_prestige_level_4 }
			5 = { add_character_modifier = tribal_prestige_level_5 }
		}
	}
}

on_set_relation_tribe_member = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_set_relation_tribe_member // tribe_leader [Scope.Char.GetName] tribe_member [target.GetName]" }
		if = {
			limit = { NOT = { has_variable = tribe_leader }}
			set_variable = {
				name = tribe_leader
				value = THIS
			}
		}
		scope:target = {
			every_relation = {
				type = tribe_leader
				limit = { NOT = { THIS = PREV }}
				remove_relation_tribe_member = PREV
			}
			set_variable = {
				name = tribe_leader
				value = PREV
			}
		}
		if = { limit = { has_realm_law = tribal_pact_independence NOT = { scope:target = { has_realm_law = tribal_pact_independence }}} scope:target = { add_realm_law = tribal_pact_independence }}
		else_if = { limit = { has_realm_law = tribal_pact_alliance NOT = { scope:target = { has_realm_law = tribal_pact_alliance }}} scope:target = { add_realm_law = tribal_pact_alliance }}
		else_if = { limit = { has_realm_law = tribal_pact_protection NOT = { scope:target = { has_realm_law = tribal_pact_protection }}} scope:target = { add_realm_law = tribal_pact_protection }}
		if = { limit = { has_realm_law = tribal_legitimacy_challenged NOT = { scope:target = { has_realm_law = tribal_legitimacy_challenged }}} scope:target = { add_realm_law = tribal_legitimacy_challenged }}
		else_if = { limit = { has_realm_law = tribal_legitimacy_respected NOT = { scope:target = { has_realm_law = tribal_legitimacy_respected }}} scope:target = { add_realm_law = tribal_legitimacy_respected }}
		else_if = { limit = { has_realm_law = tribal_legitimacy_de_jure NOT = { scope:target = { has_realm_law = tribal_legitimacy_de_jure }}} scope:target = { add_realm_law = tribal_legitimacy_de_jure }}
		if = { limit = { has_realm_law = tribal_inheritance_traditional NOT = { scope:target = { has_realm_law = tribal_inheritance_traditional }}} scope:target = { add_realm_law = tribal_inheritance_traditional }}
		else_if = { limit = { has_realm_law = tribal_inheritance_assembly NOT = { scope:target = { has_realm_law = tribal_inheritance_assembly }}} scope:target = { add_realm_law = tribal_inheritance_assembly }}
		else_if = { limit = { has_realm_law = tribal_inheritance_succession NOT = { scope:target = { has_realm_law = tribal_inheritance_succession }}} scope:target = { add_realm_law = tribal_inheritance_succession }}
		if = { limit = { has_realm_law = tribal_law_enforcement_absent NOT = { scope:target = { has_realm_law = tribal_law_enforcement_absent }}} scope:target = { add_realm_law = tribal_law_enforcement_absent }}
		else_if = { limit = { has_realm_law = tribal_law_enforcement_vassals NOT = { scope:target = { has_realm_law = tribal_law_enforcement_vassals }}} scope:target = { add_realm_law = tribal_law_enforcement_vassals }}
		else_if = { limit = { has_realm_law = tribal_law_enforcement_absolute NOT = { scope:target = { has_realm_law = tribal_law_enforcement_absolute }}} scope:target = { add_realm_law = tribal_law_enforcement_absolute }}
		if = { limit = { has_realm_law = tribal_raiding_all NOT = { scope:target = { has_realm_law = tribal_raiding_all }}} scope:target = { add_realm_law = tribal_raiding_all }}
		else_if = { limit = { has_realm_law = tribal_raiding_top_liege NOT = { scope:target = { has_realm_law = tribal_raiding_top_liege }}} scope:target = { add_realm_law = tribal_raiding_top_liege }}
		else_if = { limit = { has_realm_law = tribal_raiding_abolished NOT = { scope:target = { has_realm_law = tribal_raiding_abolished }}} scope:target = { add_realm_law = tribal_raiding_abolished }}
		if = {
			limit = {
				OR = {
					has_realm_law = tribal_pact_alliance
					has_realm_law = tribal_pact_protection
				}
			}
			scope:target.liege = { create_alliance = scope:target }
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_set_relation_tribe_member end" }
	}
}

on_remove_relation_tribe_member = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_remove_relation_tribe_member // tribe_leader [Scope.Char.GetName] tribe_member [target.GetName]" }
		scope:target = { remove_variable = tribe_leader }
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_remove_relation_tribe_member end" }
	}
}

on_death_relation_tribe_member = {
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_remove_relation_tribe_member // tribe_leader [Scope.Char.GetName] tribe_member [target.GetName]" }
		if = {
			limit = {
				scope:target = {
					has_variable = tribe_leader
					var:tribe_leader = PREV
				}
			}
			if = { limit = { debug_only = yes } debug_log = "tribe_member remove_variable = tribe_leader [Scope.Char.MakeScope.Var('tribe_leader').Char.GetName]" }
			remove_variable = tribe_leader
		}
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_death_relation_tribe_member end" }
	}
}

on_death = {
	on_actions = {
		on_death_tribe_leader
	}
}

on_death_tribe_leader = {
	trigger = {
		has_government = tribal_government
		has_realm_law = tribal_legitimacy_challenged
		any_relation = {
			type = tribe_member
		}
	}
	effect = {
		if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_death_tribe_leader" debug_log_scopes = no }
		save_scope_as = old_tribe_leader
		primary_title = {
			ordered_title_heir = {
				position = 0
				save_scope_as = new_tribe_leader
				if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_death_tribe_leader // new_tribe_leader [Scope.Char.GetName]" }
			}
		}
		every_relation = {
			type = tribe_member
			add_to_list = legitimacy_challenge_tribe_member
			if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // on_actions // on_death_tribe_leader // legitimacy_challenge_tribe_member [Scope.Char.GetName]" }
		}
		scope:new_tribe_leader = {
			trigger_event = { id = Tribal_Trouble_legitimacy_challenged.0001 days = 1 }
		}
	}
}

on_alliance_added = {
	on_actions = {
		on_alliance_added_debug
	}
}

on_alliance_added_debug = {
	effect = {
		debug_log = "on_alliance_added_debug"
		scope:first = { debug_log_scopes = no }
		scope:second = { debug_log_scopes = no }
	}
}