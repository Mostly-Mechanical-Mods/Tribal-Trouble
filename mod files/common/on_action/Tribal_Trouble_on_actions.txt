on_game_start_after_lobby = {
	on_actions = {
		on_game_start_tribal_trouble_setup
		yearly_feudalization_pressure
	}
}

on_dynasty_created = {
	on_actions = {
		on_dynasty_created_dynasty_listing
	}
}

quarterly_playable_pulse = {
	on_actions = {
		tribal_trouble_quarterly_pulse_domain_limit
	}
}

on_game_start_tribal_trouble_setup = {
	effect = {
		every_ruler = {
			# Initialize dynasties global variable list
			if = {
				limit = { exists = dynasty }
				dynasty = {
					add_to_global_variable_list = {
						name = dynasties
						target = THIS
					}
				}
			}
			# Set-up initial tribal alliances between liege and vassals
			if = {
				limit = {
					has_government = tribal_government
					is_independent_ruler = no
					liege = { has_government = tribal_government }
				}
				liege = { create_alliance = PREV }
			}
			# Tribal counts give out their extra counties
			if = {
				limit = {
					has_government = tribal_government
					is_independent_ruler = no
					highest_held_title_tier = tier_county
					domain_size > domain_limit
				}
				while = {
					limit = { domain_size > domain_limit }
					random_held_title = {
						limit = { NOT = { THIS = PREV.primary_title }}
						save_temporary_scope_as = title_handed_out
					}
					if = {
						limit = { any_courtier_or_guest = { can_be_granted_title = yes }}
						ordered_courtier_or_guest = {
							limit = { can_be_granted_title = yes }
							order_by = {
								value = 0
								if = {
									limit = { is_heir_of = PREV }
									add = 1000
								}
								else_if = {
									limit = { is_close_family_of = PREV }
									add = 500
								}
								else_if = {
									limit = { is_close_or_extended_family_of = PREV }
									add = 250
								}
								else_if = {
									limit = {
										exists = dynasty
										dynasty = PREV.dynasty
									}
									add = 100
								}
								else = {}
								if = {
									limit = {
										PREV = {
											save_temporary_opinion_value_as = {
												name = liege_opinion_of
												target = PREV
											}
										}
									}
									add = scope:liege_opinion_of
								}
							}
							position = 0
							get_title = scope:title_handed_out
						}
					}
					else = {
						if = {
							limit = { faith = { has_doctrine = doctrine_gender_male_dominated }}
							create_character = {
								faith = THIS.faith
								culture = THIS.culture
								location = THIS.location
								gender = male
								age = { 20 40 }
								save_scope_as = title_recipient
							}
						}
						else = {
							create_character = {
								faith = THIS.faith
								culture = THIS.culture
								location = THIS.location
								gender = female
								age = { 20 40 }
								save_scope_as = title_recipient
							}
						}
						scope:title_recipient = { get_title = scope:title_handed_out }
					}
				}
			}
			# Independant Tribal counts get a titular duchy title
			if = {
				limit = {
					has_government = tribal_government
					is_independent_ruler = yes
					highest_held_title_tier = tier_county
					domain_size > domain_limit
				}
				save_scope_as = founder
				primary_title = {
					save_scope_as = old_title
				}
				
				create_dynamic_title = {
					tier = duchy
					name = NEW_CREATED_TITLE_NAME
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				
				scope:new_title = {
					change_title_holder = {
						holder = PREV
						change = scope:change
					}
					set_coa = scope:old_title
					set_color_from_title = scope:old_title
				}
				
				resolve_title_and_vassal_change = scope:change
			}
		}
	}
}

on_dynasty_created_dynasty_listing = {
	effect = {
		add_to_global_variable_list = {
			name = dynasties
			target = THIS
		}
	}
}



yearly_feudalization_pressure = {
	effect = {
		debug_log = "yearly_feudalization_pressure start"
		every_culture_global = {
			set_variable = {
				name = tribal_county
				value = 0
			}
			set_variable = {
				name = total_county
				value = 0
			}
		}
		every_religion_global = {
			every_faith = {
				set_variable = {
					name = tribal_county
					value = 0
				}
				set_variable = {
					name = total_county
					value = 0
				}
			}
		}
		every_in_global_list = {
			variable = dynasties
			set_variable = {
				name = tribal_county
				value = 0
			}
			set_variable = {
				name = total_county
				value = 0
			}
		}
		every_ruler = {
			if = {
				limit = { exists = var:total_county }
				remove_variable = total_county
			}
			if = {
				limit = { exists = var:tribal_county }
				remove_variable = tribal_county
			}
		}
		every_county = {
			culture = {
				change_variable = {
					name = total_county
					add = 1
				}
			}
			faith = {
				change_variable = {
					name = total_county
					add = 1
				}
			}
			if = {
				limit = {
					holder = { is_lowborn = no }					
					exists = holder.dynasty.var:total_county
				}
				holder.dynasty = {
					change_variable = {
						name = total_county
						add = 1
					}
				}
			}
			if = {
				limit = { exists = holder.var:total_county }
				holder = {
					change_variable = {
						name = total_county
						add = 1
					}
				}
			}
			else = {
				holder = {
					set_variable = {
						name = total_county
						value = 1
					}
					set_variable = {
						name = tribal_county
						value = 1
					}
				}
			}
			if = {
				# limit = { holder = { has_government = tribal_government }}
				limit = { any_county_province = { has_holding_type = tribal_holding }}
				culture = {
					change_variable = {
						name = tribal_county
						add = 1
					}
				}
				faith = {
					change_variable = {
						name = tribal_county
						add = 1
					}
				}
				if = {
					limit = {
						holder = { is_lowborn = no }					
						exists = holder.dynasty.var:total_county
					}
					holder.dynasty = {
						change_variable = {
							name = tribal_county
							add = 1
						}
					}
				}
				if = {
					limit = { exists = holder.var:total_county }
					holder = {
						change_variable = {
							name = tribal_county
							add = 1
						}
					}
				}
				else = {
					holder = {
						set_variable = {
							name = tribal_county
							value = 1
						}
					}
				}
			}
		}
		every_culture_global = {
			set_variable = {
				name = feudalization
				value = {
					add = var:total_county
					subtract = var:tribal_county
					divide = {
						add = var:total_county
						min = 1
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				set_variable = {
					name = feudalization
					value = {
						add = var:total_county
						subtract = var:tribal_county
						divide = {
							add = var:total_county
							min = 1
						}
					}
				}
			}
		}
		every_in_global_list = {
			variable = dynasties
			set_variable = {
				name = feudalization
				value = {
					add = var:total_county
					subtract = var:tribal_county
					divide = {
						add = var:total_county
						min = 1
					}
				}
			}
		}
		every_ruler = {
			limit = {
				is_landed = yes
				highest_held_title_tier >= tier_county
			}
			set_variable = {
				name = feudalization
				value = {
					add = var:total_county
					subtract = var:tribal_county
					divide = {
						add = var:total_county
						min = 1
					}
				}
			}
		}
		debug_log = "yearly_feudalization_pressure end"
	}
}

tribal_trouble_quarterly_pulse_domain_limit = {
	trigger = {
		has_government = tribal_government
		is_independent_ruler = no
		highest_held_title_tier = tier_county
		domain_size > domain_limit
	}
	effect = {
		debug_log = "debug_log tribal_trouble_quarterly_pulse"
		while = {
			limit = { domain_size > domain_limit }
			random_held_title = {
				limit = { NOT = { THIS = PREV.primary_title }}
				save_temporary_scope_as = title_handed_out
			}
			if = {
				limit = { any_courtier_or_guest = { can_be_granted_title = yes }}
				ordered_courtier_or_guest = {
					limit = { can_be_granted_title = yes }
					order_by = {
						value = 0
						if = {
							limit = { is_heir_of = PREV }
							add = 1000
						}
						else_if = {
							limit = { is_close_family_of = PREV }
							add = 500
						}
						else_if = {
							limit = { is_close_or_extended_family_of = PREV }
							add = 250
						}
						else_if = {
							limit = {
								exists = dynasty
								dynasty = PREV.dynasty
							}
							add = 100
						}
						else = {}
						if = {
							limit = {
								PREV = {
									save_temporary_opinion_value_as = {
										name = liege_opinion_of
										target = PREV
									}
								}
							}
							add = scope:liege_opinion_of
						}
					}
					position = 0
					get_title = scope:title_handed_out
				}
			}
			else = {
				if = {
					limit = { faith = { has_doctrine = doctrine_gender_male_dominated }}
					create_character = {
						faith = THIS.faith
						culture = THIS.culture
						location = THIS.location
						gender = male
						age = { 20 40 }
						save_scope_as = title_recipient
					}
				}
				else = {
					create_character = {
						faith = THIS.faith
						culture = THIS.culture
						location = THIS.location
						gender = female
						age = { 20 40 }
						save_scope_as = title_recipient
					}
				}
				scope:title_recipient = { get_title = scope:title_handed_out }
			}
		}
	}
}


on_alliance_added = {
	on_actions = {
		on_alliance_added_NAP
	}
}

# scope:first = Character in relation
# scope:second = Other character in relation
# This is run once, so anything applied on both characters must be done on both root and scope:second here
on_alliance_added_NAP = {
	trigger = {
		NOT = { scope:first = scope:second }
		scope:first = { has_government = tribal_government }
		scope:second = {
			has_government = tribal_government
			NOR = {
				THIS = scope:first.liege
				liege = scope:first
			}
			NOT = { has_relation_non_aggression_pactee = scope:first }
		}
	}
	effect = {
		if = {
			limit = { NOT = { scope:first = scope:second }}
			scope:first = { set_relation_non_aggression_pactee = scope:second }
		}
		else = {
			debug_log = "MMM_debug Tribal_Trouble on_alliance_added scope:first = scope:second"
			debug_log_scopes = no
		}
	}
}

on_set_relation_non_aggression_pactee = {
	effect = {
		add_opinion = {
			modifier = non_aggression_pact
			target = scope:target
		}
		scope:target = {
			add_opinion = {
				modifier = non_aggression_pact
				target = PREV
			}
		}
	}
}

on_remove_relation_non_aggression_pactee = {
	effect = {
		remove_opinion = {
			modifier = non_aggression_pact
			target = scope:target
		}
		scope:target = {
			remove_opinion = {
				modifier = non_aggression_pact
				target = PREV
			}
		}
	}
}


on_death = {
	on_actions = {
		on_death_NAP
	}
}

# Characters get divorced in any way
# root = character initiating the divorce
# scope:spouse = the divorced spouse
# scope:reason = flag:script or flag:faith
on_divorce = {
	on_actions = {
		on_divorce_NAP
	}
}

# Character ceases to be another's concubine
# root = the concubinist
# scope:concubine = the concubine
# scope:reason = flag:death, flag:faith, or flag:script
on_concubinage_end = {
	on_actions = {
		on_concubinage_end_NAP
	}
}


# root = first person in betrothal
# scope:second = second person in betrothal
# scope:reason = flag:timeout, flag:death, flag:faith, or flag:script
on_betrothal_broken = {
	on_actions = {
		on_betrothal_broken_NAP
	}
}

on_divorce_NAP = {
	trigger = {
		cement_non_aggression_pact = { FIRST = root SECOND = scope:spouse }
	}
	effect = {
		break_cemented_non_aggression_pact = { FIRST = root SECOND = scope:spouse }
	}
}

on_concubinage_end_NAP = {
	trigger = {
		cement_non_aggression_pact = { FIRST = root SECOND = scope:concubine }
	}
	effect = {
		break_cemented_non_aggression_pact = { FIRST = root SECOND = scope:concubine }
	}
}

on_betrothal_broken_NAP = {
	trigger = {
		cement_non_aggression_pact = { FIRST = root SECOND = scope:second }
	}
	effect = {
		break_cemented_non_aggression_pact = { FIRST = root SECOND = scope:second }
	}
}

on_death_NAP = {
	trigger = {
		any_spouse = {
			exists = THIS
		}
	}
	effect = {
		every_spouse = {
			break_cemented_non_aggression_pact = { FIRST = root SECOND = THIS }
		}
	}
}

on_vassal_gained = {
	on_actions = {
		on_vassal_gained_tribal_alliance
	}
}

on_rank_up = {
	on_actions = {
		on_rank_up_tribal_alliance
		on_rank_change_vassal_limit
	}
}

on_rank_down = {
	on_actions = {
		on_rank_change_vassal_limit
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained_tribal_alliance = {
	trigger = {
		has_government = tribal_government
		scope:vassal = { has_government = tribal_government }
	}
	effect = {
		if = {
			limit = { debug_only = yes }
			debug_log = "dbg_log Tribal_Trouble on_vassal_gained_tribal_alliance"
			scope:vassal = { debug_log_scopes = yes }
			debug_log_scopes = yes
		}
		create_alliance = scope:vassal
		if = {
			limit = {
				exists = scope:old_liege
				scope:old_liege = { has_government = tribal_government }
			}
			scope:vassal = {
				set_variable = {
					name = tribal_no_longer_vassal
					days = 2
				}
			}
		}
	}
}


on_rank_up_tribal_alliance = {
	trigger = {
		has_government = tribal_government
		liege = { has_government = tribal_government }
		NOT = { is_allied_to = liege }
	}
	effect = {
		if = {
			limit = { debug_only = yes }
			debug_log = "dbg_log Tribal_Trouble on_rank_up_tribal_alliance"
			debug_log_scopes = yes
			liege = { debug_log_scopes = yes }
		}
		liege = { create_alliance = PREV }
	}
}

on_rank_change_vassal_limit = {
	trigger = {
		has_government = tribal_government
		highest_held_title_tier >= tier_duchy
		is_landed = yes
	}
	effect = {
		if = {
			limit = { highest_held_title_tier = tier_duchy }
			add_character_modifier = tribal_duke
		}
		else_if = {
			limit = { highest_held_title_tier = tier_kingdom }
			remove_character_modifier = tribal_duke
			add_character_modifier = tribal_king
		}
		else_if = {
			limit = { highest_held_title_tier = tier_empire }
			remove_character_modifier = tribal_duke
			remove_character_modifier = tribal_king
			add_character_modifier = tribal_emperor
		}
		else = {}
	}
}


on_siege_completion = {
    on_actions = {
        KOH_SIEGE1
    }
}

KOH_SIEGE1 = {
    effect = {
        scope:county = { 
            set_variable = { 
                name = occupant 
                target = PREV
            }
        }
    }
}