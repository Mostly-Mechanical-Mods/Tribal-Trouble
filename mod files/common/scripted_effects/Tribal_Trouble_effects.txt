create_titular_duchy = {
	save_scope_as = founder
	primary_title = {
		save_scope_as = old_title
	}
	
	create_dynamic_title = {
		tier = duchy
		name = NEW_CREATED_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	scope:new_title = {
		change_title_holder = {
			holder = PREV
			change = scope:change
		}
		set_coa = scope:old_title
		set_color_from_title = scope:old_title
	}
	
	resolve_title_and_vassal_change = scope:change

	if = {
		limit = {
			NOT = { exists = scope:new_title.holder }
		}
		debug_log = "BUG // Tribal Trouble // scripted_effect create_titular_duchy // scope:new_title has no holder"
		scope:old_title = { debug_log_scopes = no }
		scope:new_title = { debug_log_scopes = no }
	}
	else = {
		if = {
			limit = { scope:old_title = { has_title_law = tribal_succession_appointment }}
			scope:new_title = { add_title_law = tribal_succession_appointment }
		}
		else_if = {
			limit = { scope:old_title = { has_title_law = tribal_succession_assembly }}
			scope:new_title = { add_title_law = tribal_succession_assembly }
		}
	}

	if = { limit = { scope:old_title.tier >= tier_duchy scope:old_title = { is_title_created = yes }} destroy_title = scope:old_title }
}

create_titular_kingdom = {
	debug_log = "dbg_log Tribal_Trouble create_titular_empire"
	debug_log_scopes = no
	save_scope_as = founder
	primary_title = {
		save_scope_as = old_title
	}
	
	create_dynamic_title = {
		tier = kingdom
		name = NEW_CREATED_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	scope:new_title = {
		change_title_holder = {
			holder = PREV
			change = scope:change
		}
		set_coa = scope:old_title
		set_color_from_title = scope:old_title
	}
	
	resolve_title_and_vassal_change = scope:change
	debug_log = "resolve_title_and_vassal_change done"
	primary_title = { debug_log_scopes = no }

	if = {
		limit = { scope:old_title = { has_title_law = tribal_succession_appointment }}
		scope:new_title = { add_title_law = tribal_succession_appointment }
	}
	else_if = {
		limit = { scope:old_title = { has_title_law = tribal_succession_assembly }}
		scope:new_title = { add_title_law = tribal_succession_assembly }
	}

	if = { limit = { scope:old_title.tier >= tier_duchy scope:old_title = { is_title_created = yes }} destroy_title = scope:old_title }
}

create_titular_empire = {
	debug_log = "dbg_log Tribal_Trouble create_titular_empire"
	debug_log_scopes = no
	save_scope_as = founder
	primary_title = {
		save_scope_as = old_title
		debug_log_scopes = no
	}
	
	create_dynamic_title = {
		tier = empire
		name = NEW_CREATED_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	scope:new_title = {
		change_title_holder = {
			holder = PREV
			change = scope:change
		}
		set_coa = scope:old_title
		set_color_from_title = scope:old_title
	}
	
	resolve_title_and_vassal_change = scope:change
	debug_log = "resolve_title_and_vassal_change done"
	primary_title = { debug_log_scopes = no }

	if = {
		limit = { scope:old_title = { has_title_law = tribal_succession_appointment }}
		scope:new_title = { add_title_law = tribal_succession_appointment }
	}
	else_if = {
		limit = { scope:old_title = { has_title_law = tribal_succession_assembly }}
		scope:new_title = { add_title_law = tribal_succession_assembly }
	}

	if = { limit = { scope:old_title.tier >= tier_duchy scope:old_title = { is_title_created = yes }} destroy_title = scope:old_title }
}

hand_out_counties = {
	while = {
		limit = { domain_size > domain_limit }
		random_held_title = {
			limit = { NOT = { THIS = PREV.primary_title }}
			save_temporary_scope_as = title_handed_out
		}
		if = {
			limit = { any_courtier_or_guest = { can_be_granted_title = yes }}
			ordered_courtier_or_guest = {
				limit = { can_be_granted_title = yes }
				order_by = {
					value = 0
					if = {
						limit = { is_heir_of = PREV }
						add = 1000
					}
					else_if = {
						limit = { is_close_family_of = PREV }
						add = 500
					}
					else_if = {
						limit = { is_close_or_extended_family_of = PREV }
						add = 250
					}
					else_if = {
						limit = {
							exists = dynasty
							dynasty = PREV.dynasty
						}
						add = 100
					}
					else = {}
					if = {
						limit = {
							PREV = {
								save_temporary_opinion_value_as = {
									name = liege_opinion_of
									target = PREV
								}
							}
						}
						add = scope:liege_opinion_of
					}
				}
				position = 0
				get_title = scope:title_handed_out
			}
		}
		else = {
			if = {
				limit = { faith = { has_doctrine = doctrine_gender_male_dominated }}
				create_character = {
					faith = THIS.faith
					culture = THIS.culture
					location = THIS.location
					gender = male
					age = { 20 40 }
					save_scope_as = title_recipient
				}
			}
			else = {
				create_character = {
					faith = THIS.faith
					culture = THIS.culture
					location = THIS.location
					gender = female
					age = { 20 40 }
					save_scope_as = title_recipient
				}
			}
			scope:title_recipient = { get_title = scope:title_handed_out }
		}
	}
}

set_starting_tribal_laws = {
	if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // scripted_effects // set_starting_tribal_laws" debug_log_scopes = no }
	if = { limit = { NOT = { has_realm_law_flag = tribal_legitimacy_law }} add_realm_law = tribal_legitimacy_challenged }
	if = { limit = { NOT = { has_realm_law_flag = tribal_inheritance_law }} add_realm_law = tribal_inheritance_traditional }
	if = { limit = { NOT = { has_realm_law_flag = tribal_pact_law }} add_realm_law = tribal_pact_independence }
	if = { limit = { NOT = { has_realm_law_flag = tribal_law_enforcement_law }} add_realm_law = tribal_trial_combat }
	if = { limit = { NOT = { has_realm_law_flag = tribal_raiding_law }} add_realm_law = tribal_raiding_all }
	if = { limit = { debug_only = yes } debug_log = "feudalization_leeway [Scope.Char.MakeScope.ScriptValue('feudalization_leeway')] feudalization_progress [Scope.Char.MakeScope.ScriptValue('feudalization_progress')] feudalization_desire [Scope.Char.MakeScope.ScriptValue('feudalization_desire')]" }
	while = {
		limit = {
			feudalization_leeway > 0.1
			feudalization_progress.compare_value < feudalization_desire
		}
		random_list = {
			10 = {
				trigger = { has_realm_law = tribal_legitimacy_challenged }
				modifier = {
					current_date = 867.1.1
					OR = {
						primary_title = title:k_scotland
						primary_title = title:k_scotland
					}
					add = 1000
				}
				add_realm_law = tribal_legitimacy_respected

			}
			5 = {
				trigger = { has_realm_law = tribal_legitimacy_respected }
				modifier = {
					current_date = 867.1.1
					OR = {
						primary_title = title:k_scotland
						primary_title = title:k_scotland
					}
					add = 1000
				}
				add_realm_law = tribal_legitimacy_de_jure
			}
			10 = {
				trigger = { has_realm_law = tribal_inheritance_traditional }
				modifier = {
					current_date = 867.1.1
					OR = {
						primary_title = title:k_scotland
						primary_title = title:k_scotland
					}
					add = 1000
				}
				add_realm_law = tribal_inheritance_assembly
			}
			5 = {
				trigger = { has_realm_law = tribal_inheritance_assembly }
				modifier = {
					current_date = 867.1.1
					OR = {
						primary_title = title:k_scotland
						primary_title = title:k_scotland
					}
					add = 1000
				}
				add_realm_law = tribal_inheritance_succession
			}
			10 = {
				trigger = { has_realm_law = tribal_pact_independence }
				add_realm_law = tribal_pact_alliance
			}
			5 = {
				trigger = { has_realm_law = tribal_pact_alliance }
				add_realm_law = tribal_pact_protection
			}
			10 = {
				trigger = { has_realm_law = tribal_trial_combat }
				add_realm_law = tribal_trial_assembly
			}
			5 = {
				trigger = { has_realm_law = tribal_trial_assembly }
				add_realm_law = tribal_trial_court
			}
			10 = {
				trigger = { has_realm_law = tribal_raiding_all }
				add_realm_law = tribal_raiding_expeditions
			}
			5 = {
				trigger = { has_realm_law = tribal_raiding_expeditions }
				add_realm_law = tribal_raiding_abolished
			}
		}
		if = { limit = { debug_only = yes } debug_log = "feudalization_leeway [Scope.Char.MakeScope.ScriptValue('feudalization_leeway')] feudalization_progress [Scope.Char.MakeScope.ScriptValue('feudalization_progress')] feudalization_desire [Scope.Char.MakeScope.ScriptValue('feudalization_desire')]" }
	}
	if = { limit = { debug_only = yes } debug_log = "dbg_log // Tribal Trouble // scripted_effects // set_starting_tribal_laws end" }
}

create_tribal_pact = {
	if = {
		limit = { has_government = tribal_government }
		save_scope_as = new_tribe_leader
		if = {
			limit = { any_relation = { type = tribe_leader }}
			every_relation = {
				type = tribe_leader
				remove_relation_tribe_member = scope:new_tribe_leader
			}
		}
		ordered_vassal_or_below = {			
			order_by = highest_held_title_tier
			max = 1000
			check_range_bounds = no
			limit = {
				trigger_if = {
					limit = { NOT = { liege = scope:new_tribe_leader }}
					liege = {
						any_relation = { type = tribe_leader THIS = scope:new_tribe_leader }
						has_government = tribal_government
					}
				}
				NOT = { any_relation = { type = tribe_leader THIS = scope:new_tribe_leader }}
			}
			scope:new_tribe_leader = { set_relation_tribe_member = PREV }
		}
	}
}

