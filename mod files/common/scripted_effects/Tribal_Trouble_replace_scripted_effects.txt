launch_hungarian_migration_scripted_effect = {
	$INVADER$ = {
		#If Hungary already exists, just tell us it's getting a name change.
		if = {
			limit = {
				title:k_hungary = { is_title_created = yes }
			}
			custom_tooltip = launch_hungarian_migration_scripted_effect.tt.pannonia_renamed
			title:k_hungary = { set_title_name = k_hungary }
		}
		#Otherwise, if Hungary doesn't exist, create & acquire it _whilst_ giving it a name change.
		else_if = {
			limit = {
				title:k_hungary = { is_title_created = no }
			}
			custom_tooltip = launch_hungarian_migration_scripted_effect.tt.pannonia_renamed_and_usurped
			hidden_effect = {
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:k_hungary = {
					change_title_holder = {
						holder = $INVADER$
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
				title:k_hungary = { set_title_name = k_hungary }
			}
		}

		#If $INVADER$ has both k_hungary & any other kingdom-tier title, destroy the excess titles.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.destroy_other_kingdoms
		hidden_effect = {
			if = {
				limit = {
					has_title = title:k_hungary
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = title:k_hungary }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}

		#Replace all Avar territories within Pannonia with Mogyer, excepting Keve & Krasso.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.mogyers_move_to_pannonia
		hidden_effect = {
			every_sub_realm_county = {
				limit = {
					title_capital_county.title_province = { geographical_region = custom_hungary }
					culture = culture:avar
					NOR = {
						this = title:c_keve
						this = title:c_krasso
					}
				}
				set_county_culture = culture:mogyer
				#Switch 'em to $INVADER$'s faith if unreformed & $INVADER$ is any Magyar pagan.
				if = {
					limit = {
						$INVADER$.faith.religion = religion:magyar_religion
						faith = { has_doctrine = unreformed_faith_doctrine }
					}
					set_county_faith = $INVADER$.faith
				}
			}
		}

		#Replace all Mogyer territories outside of the Pannonian Basin
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.mogyers_outside_pannonia
		hidden_effect = {
			every_sub_realm_county = {
				limit = {
					NOT = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					culture = culture:mogyer
				}
				set_county_culture = culture:pecheneg
			}
			#Switch 'em to Tengri if Magyar pagan.
			every_sub_realm_county = {
				limit = {
					NOT = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					culture = culture:pecheneg
					religion = religion:magyar_religion
				}
				set_county_faith = faith:tengri_pagan
			}
		}

		#All territory outside Pannonia is given to new holders and/or made independent.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.non_mogyer_vassals
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.mogyer_vassals
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.former_territories
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					NOT = { culture = culture:mogyer }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						trigger_if = {
							limit = { is_titular = no }
							NOT = {
								title_capital_county.title_province = { geographical_region = custom_hungary }
							}
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
				if = {
					limit = { has_variable = tribal_pact }
					var:tribal_pact = {
						remove_list_variable = {
							name = tribes_in_pact
							target = PREV
						}
					}
					if = {
						limit = {
							has_government = tribal_government
							is_independent_ruler = yes
						}
						# create_story = tribal_pact_story
					}
				}
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					NOT = { culture = culture:mogyer }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						trigger_if = {
							limit = { is_titular = no }
							NOT = {
								title_capital_county.title_province = { geographical_region = custom_hungary }
							}
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
				if = {
					limit = { has_variable = tribal_pact }
					var:tribal_pact = {
						remove_list_variable = {
							name = tribes_in_pact
							target = PREV
						}
					}
					if = {
						limit = {
							has_government = tribal_government
							is_independent_ruler = yes
						}
						# create_story = tribal_pact_story
					}
				}
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { title:k_hungary.title_capital_county.duchy.holder = $INVADER$ }
				title:k_hungary.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					#Filter out Syrmia, because Syrmia sucks.
					limit = {
						is_titular = no
						title_capital_county.title_province = { geographical_region = custom_hungary }
						tier = tier_duchy
						NOT = { this = title:d_syrmia }
					}
					#But if we have no other choice, Syrmia is better than no duchy.
					limit = {
						is_titular = no
						title_capital_county.title_province = { geographical_region = custom_hungary }
						tier = tier_duchy
					}
					#If we have no possible duchy, make sure to reserve at least *one* county within Pannonia.
					alternative_limit = {
						is_titular = no
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					culture = culture:mogyer
					highest_held_title_tier >= tier_county
				}
				add_to_list = mogyer_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					is_titular = no
					title_capital_county.title_province = { geographical_region = custom_hungary }
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_pannonian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_pannonian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_pannonian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_pannonian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = mogyer_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_mogyer_vassal
				$INVADER$ = { add_courtier = scope:landless_mogyer_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						trigger_if = {
							limit = { is_titular = no }
							NOT = {
								title_capital_county.title_province = { geographical_region = custom_hungary }
							}
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						template = post_migration_local_warlord_template
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								title_province = { geographical_region = custom_hungary }
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
					scope:local_warlord = {
						if = {
							limit = { has_variable = tribal_pact }
							var:tribal_pact = {
								remove_list_variable = {
									name = tribes_in_pact
									target = PREV
								}
							}
							if = {
								limit = {
									has_government = tribal_government
									is_independent_ruler = yes
								}
								# create_story = tribal_pact_story
							}
						}
					}
					#If any vassals within Pannonia have gotten mixed up, shunt them back to $INVADER$, and try to find a suitable duke.
					##Start off by assembling a suitable list of affected vassals (should only ever be the one, but you never know).
					scope:local_warlord = {
						every_vassal = {
							limit = {
								#We're only interested in counts...
								highest_held_title_tier = tier_county
								#... Within Panonnia.
								any_held_title = { launch_hungarian_migration_county_is_within_custom_hungary_trigger = yes }
							}
							add_to_list = vassals_to_shunt
						}
					}
					##Sort through the list, see who should be the new liege of the misplaced vassals.
					every_in_list = {
						list = vassals_to_shunt
						#First off, check if there's a valid duke to hand 'em over to.
						if = {
							limit = {
								any_held_title = {
									launch_hungarian_migration_misplaced_count_suitable_liege_trigger = { INVADER = $INVADER$ }
								}
							}
							#If there is, we make a note of them for liege determination.
							random_held_title = {
								limit = {
									launch_hungarian_migration_misplaced_count_suitable_liege_trigger = { INVADER = $INVADER$ }
								}
								duchy.holder = { save_scope_as = appropriate_liege }
							}
						}
						#Otherwise, we just grab $INVADER$ as a solid fallback.
						else = {
							$INVADER$ = { save_scope_as = appropriate_liege }
						}
						#Reassign the errant vassal back to their rightful Pannonian realm.
						create_title_and_vassal_change = {
							type = conquest
							save_scope_as = change
							add_claim_on_loss = no
						}
						change_liege = {
							liege = scope:appropriate_liege
							change = scope:change
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
			##... Then we catch the straggler counties.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						tier = tier_county
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_hungary }
						}
					}
					save_temporary_scope_as = seceding_county
					#Create a local peasant warlord for the county.
					create_character = {
						location = scope:seceding_county.title_province
						template = post_migration_minor_warlord_template
						save_scope_as = minor_warlord
					}
					#Assign the seceding title to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:seceding_county = {
						change_title_holder = {
							holder = scope:minor_warlord
							change = scope:change
							take_baronies = yes
						}
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:minor_warlord = {
						becomes_independent = { change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
					scope:minor_warlord = {
						if = {
							limit = { has_variable = tribal_pact }
							var:tribal_pact = {
								remove_list_variable = {
									name = tribes_in_pact
									target = PREV
								}
							}
							if = {
								limit = {
									has_government = tribal_government
									is_independent_ruler = yes
								}
								# create_story = tribal_pact_story
							}
						}
					}
				}
			}
		}
	}
}